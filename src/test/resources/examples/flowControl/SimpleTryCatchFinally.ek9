#!ek9
defines module com.customer.exceptions

  defines type

    BigCat
      Lion
      Tiger
      WildCat
      Leopard
      Lynx

  defines class

    AnException extends Exception
      supportingInformation String: String()

      AnException()
        ->
          primaryReason as String
          supportingInformation as String
          exitCode as Integer
        super(primaryReason, exitCode)
        this.supportingInformation :=: supportingInformation

      supportingInformation()
        <- rtn as String: supportingInformation

      override operator $ as pure
        <- rtn as String: information() + " " + supportingInformation() + " exit code " + $exitCode()

    OtherException extends Exception
      retryAfter as DateTime: DateTime()

      OtherException()
        ->
          reason as String
          retryAfter as DateTime
        super(reason)
        this.retryAfter :=: retryAfter

      retryAfter()
        <- rtn as DateTime: retryAfter

      override operator $ as pure
        <- rtn as String: information() + " retry after " + $retryAfter()

    ExceptionExample
      clock as Clock?
      deferProcessingUntilAfter as DateTime: DateTime()

      default private ExceptionExample()

      ExceptionExample()
        -> clock as Clock
        this.clock: clock

      checkExceptionHandling()
        -> aCat as BigCat
        <- didProcess as Boolean: false

        stdout <- Stdout()
        stderr <- Stderr()

        try
          if deferProcessing()
            stdout.println("Deferred until after " + $deferProcessingUntilAfter + " " + $aCat + " not processed")
          else
            triggerResult <- triggerPossibleException(aCat)
            stdout.println(triggerResult)
            didProcess: true
        catch
          -> ex as Exception
          errorMessage <- handleException(ex)
          stderr.println(errorMessage)
        finally
          stdout.println("Finished checking " + $aCat)

      triggerPossibleException()
        -> aCat as BigCat
        <- rtn as String: String()

        switch aCat
          case BigCat.Lion
            throw Exception($aCat, 1)
          case BigCat.Tiger
            throw AnException("Too dangerous", $aCat, 2)
          case BigCat.Leopard
            throw OtherException($aCat, clock.dateTime() + PT2H)
          default
            rtn: "Success with " + $aCat

      deferProcessing()
        <- rtn as Boolean: deferProcessingUntilAfter? <- deferProcessingUntilAfter > clock.dateTime() else false

      private handleException() as dispatcher
        -> ex as Exception
        <- rtn as String: $ex

      private handleException()
        -> ex as AnException
        <- rtn as String: $ex
        if ex.exitCode()?
          tidyUpReadyForProgramExit()

      private handleException()
        -> ex as OtherException
        <- rtn as String: $ex
        this.deferProcessingUntilAfter: ex.retryAfter()

      private tidyUpReadyForProgramExit()
        Stdout().println("Would tidy up any state ready for program exit")

    FileExceptionExample

      demonstrateFileNotFound()
        stdout <- Stdout()
        stderr <- Stderr()

        try
          -> input <- TextFile("MightNotExist.txt").input()
          cat input > stdout
        //rather than use catch 'handle' can be used
        handle
          -> ex as Exception
          stderr.println($ex)
        finally
          stdout.println("Automatically closed file if opened")

      demonstrateFilesNotFound()

        mainResults <- try
          ->
            input1 <- TextFile("MightNotExist.txt").input()
            input2 <- TextFile("AlsoMightNotExist.txt").input()
          <-
            rtn as List of String: cat input1, input2 | collect as List of String


        //Let the exceptions fly back - don't handle in here.
        Stdout().println("main Results [" + $mainResults + "]")

  defines program
    TryCatchExample()
      stdout <- Stdout()
      stderr <- Stderr()

      //Rather than use SystemClock - simulate one so that date time can be altered.
      simulatedClock <- () with trait of Clock as class
        currentDateTime as DateTime: 1971-02-01T12:00:00Z
        override dateTime()
          <- rtn as DateTime: currentDateTime

        setCurrentDateTime()
          -> newDateTime as DateTime
          this.currentDateTime = newDateTime

      //use the simulated clock
      example1 <- ExceptionExample(simulatedClock)

      for cat in BigCat
        if example1.checkExceptionHandling(cat)
          stdout.println("Processing of " + $cat + " was completed")
        else
          stderr.println("Processing of " + $cat + " was NOT completed")

      //just try Lynx again
      assert ~ example1.checkExceptionHandling(BigCat.Lynx)

      //alter the time just passed the retry after time.
      simulatedClock.setCurrentDateTime(simulatedClock.dateTime() + PT2H1M)
      //Now it should be processed.
      assert example1.checkExceptionHandling(BigCat.Lynx)

      example2 <- FileExceptionExample()
      example2.demonstrateFileNotFound()

      try
        example2.demonstrateFilesNotFound()
      catch
        -> ex as Exception
        Stderr().println("TryCatchExample: " + $ex)
//EOF