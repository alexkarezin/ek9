#!ek9
defines module com.customer.just

  defines type
    PriorityQueue of String

  defines function

    suitableLength
      -> value as String
      <- rtn as Boolean: length of value > 5

  defines program

    ShowPriorityQueue()
      stdout <- Stdout()

      //negate the returned comparison to change the ordering.
      //Note how t1, t2 and r - are picked up from the definition of Comparator (ek9 built-in)
      comparator <- () extends Comparator of String as (r: ~(t1 <=> t2))

      qOne <- PriorityQueue("Bill").useComparator(comparator)

      qOne += "And"
      qOne += "Ted"
      qOne += "Excellent"
      qOne += "Adventure"
      qOne += "Outrageous"
      qOne += "Bogus"

      allEntries <- cat qOne | collect as List of String
      stdout.println($allEntries)
      assert $allEntries == "[Ted, Outrageous, Excellent, Bogus, Bill, And, Adventure]"

      qOne.setSize(3)

      limitedEntries <- qOne.list()
      assert $limitedEntries == "[Bill, And, Adventure]"
      stdout.println($limitedEntries)

      qOne += "Missy"
      iter <- qOne.iterator()
      while iter?
        stdout.println($iter.next())

      //Alternative way to get the list - but in reverse order.
      asList <- ~qOne.list()
      stdout.println($asList)
      assert $asList == "[Adventure, And, Bill]"

      bestTwo as PriorityQueue of String: PriorityQueue().setSize(2).useComparator(comparator)
      cat allEntries | filter by suitableLength > bestTwo
      stdout.println($~bestTwo.list())
      assert $~bestTwo.list() == "[Adventure, Excellent]"


//EOF