#!ek9
defines module bad.switches.use

  defines program

    ValidProg()
      val <- "ToCheck"

      //If you include a default then String? is OK
      result1 <- switch val
        <- resultText as String?
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"
        default
          resultText: "Nothing"

      //Also if you initialise resultText then you can omit the default
      result2 <- switch val
        <- resultText as String: "Nothing"
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"

    Prog1()
      val <- "ToCheck"

      //So there is no point in this return from a switch
      switch val
        <- resultText as String?
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"
        default
          resultText: "Nothing"

      //Here there is no return value but one is expected
      //This is likely to be how someone new to ek9 will get it wrong.
      someResult <- switch val
        case "ToCheck"
          someResult: "Jackpot"
        case "This"
          someResult: "Was this"
        case "This"
          someResult: "Was that"
        default
          someResult: "Nothing"

    <?-
      Designed to show how a missing 'default' is detected in a normal switch statememt
    -?>
    Prog2()
      val <- "ToCheck"

      result as String?

      switch val
        case "This"
          result: "Nice"
        case "That"
          result: "Very nice"
        case "Other"
          result: "Not so nice"
        case "ToCheck"
          result: "Jackpot"
        //missing default - so expect an error

    Prog3()
      val <- "ToCheck"

      //No initialiser for the switch return and also no default
      someResult <- switch val
        <- resultText as String?
        case "ToCheck"
          resultText: "Jackpot"
        case "This"
          resultText: "Was this"
        case "This"
          resultText: "Was that"

//EOF