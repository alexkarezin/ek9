#!ek9
defines module com.lock
  
  defines function
    createProtectedName()
      <- lock as MutexLock of String: MutexLock("Steve")
       
  defines program
    LockExample()
      stdout <- Stdout()

      //Item to wrap in a mutex lock so access is restricted
      lockableItem <- createProtectedName()

      //Our key for access also pass in a few parameters needed what access is allowed
      //We'll just use an anonymous class for this not used anywhere else.
      accessKey <- (stdout, lockableItem) with trait of MutexKey as class
        override access()
          name <- lockableItem.get()          
          stdout.println("Accessing [" + $name + "]")
          name :=: "Stephen"
          assert lockableItem.owner()

      //Now try access via key and wait on mutex
      lockableItem.enter(accessKey)
      //Don't think you own the lock here - only owned in access() above
      assert not lockableItem.owner()
      
      //As there are no other threads access will be granted here
      //If other held the lock this would return false and key.access() would not be called. 
      assert lockableItem.tryEnter(accessKey)      

      //Attempt access without key - should get exception.
      try
        name <- lockableItem.get()
        stdout.println("Accessing [" + name + "]")
      catch
        -> ex as Exception
        stdout.println("Exception [" + $ex + "]")
//EOF